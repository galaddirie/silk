---
description:
globs:
alwaysApply: true
---
# Option

```
Option module.

Contains a collection of static methods (functions) for operating on options. All functions takes the source as the last curried argument, i.e all functions returns a function that takes the source sequence as the only argument.

Nothing: Option[Any] = Option(none=None)
Singleton Nothing object.

Since Nothing is a singleton it can be tested e.g using is:
if xs is Nothing:
    return True
class Option(**kwargs: Any)
Option class.

static Nothing() → Option[_TSourceOut]
Create a None option.

static Some(value: _TResult) → Option[_TResult]
Create a Some option.

bind(mapper: Callable[[_TSourceOut], Option[_TResult]]) → Option[_TResult]
Bind option.

Applies and returns the result of the mapper if the value is Some. If the value is Nothing then Nothing is returned.

Parameters
:
mapper – A function that takes the value of type TSource from an option and transforms it into an option containing a value of type TResult.

Returns
:
An option of the output type of the mapper.

default_value(value: _TSource) → _TSourceOut | _TSource
Get with default value.

Gets the value of the option if the option is Some, otherwise returns the specified default value.

default_with(getter: Callable[[], _TSource]) → _TSourceOut | _TSource
Get with default value lazily.

Gets the value of the option if the option is Some, otherwise returns the value produced by the getter

dict() → _TSourceOut | None
Returns a json string representation of the option.

filter(predicate: Callable[[_TSourceOut], bool]) → Option[_TSourceOut]
Filter option.

Returns the input if the predicate evaluates to true, otherwise returns Nothing.

is_none() → bool
Returns true if the option is Nothing.

is_some() → bool
Returns true if the option is not Nothing.

map(mapper: Callable[[_TSourceOut], _TResult]) → Option[_TResult]
Map option.

Applies the mapper to the value if the option is Some, otherwise returns Nothing.

map2(mapper: Callable[[_TSourceOut, _T2], _TResult], other: Option[_T2]) → Option[_TResult]
Map2 option.

Applies the mapper to the values if both options are Some, otherwise returns Nothing.

static of_obj(value: _TSource) → Option[_TSource]
Convert object to an option.

static of_optional(value: _TSource | None) → Option[_TSource]
Convert optional value to an option.

static of_result(result: Result[_TSource, Any]) → Option[_TSource]
Convert result to an option.

or_else(if_none: Option[_TSourceOut]) → Option[_TSourceOut]
Returns option if it is Some, otherwise returns if_one.

or_else_with(if_none: Callable[[], Option[_TSourceOut]]) → Option[_TSourceOut]
Or-else-with.

Returns option if it is Some, otherwise evaluates the given function and returns the result.

starmap(mapper: Callable[[Unpack], _TResult]) → Option[_TResult]
Starmap option.

Applies the mapper to the values if the option is Some, otherwise returns Nothing. The tuple is unpacked before applying the mapper.

to_list() → list[_TSourceOut]
Convert option to list.

to_optional() → _TSourceOut | None
Convert option to an optional.

to_result(error: _TError) → Result[_TSourceOut, _TError]
Convert option to a result.

to_result_with(error: Callable[[], _TError]) → Result[_TSourceOut, _TError]
Convert option to a result.

to_seq() → Seq[_TSourceOut]
Convert option to sequence.

property value: _TSourceOut
Returns the value wrapped by the option.

A ValueError is raised if the option is Nothing.

Some(value: _T1) → Option[_T1]
Create a Some option.

bind(option: Option[_TSource], mapper: Callable[[_TSource], Option[_TResult]]) → Option[_TResult]
Bind option.

Applies and returns the result of the mapper if the value is Some. If the value is Nothing then Nothing is returned.

Parameters
:
option – Source option to bind.

mapper – A function that takes the value of type _TSource from an option and transforms it into an option containing a value of type TResult.

Returns
:
A partially applied function that takes an option and returns an option of the output type of the mapper.

default_arg(value: Option[_TSource], default_value: _T1) → _TSource | _T1
Specify default argument.

Used to specify a default value for an optional argument in the implementation of a function. Same as default_value, but “uncurried” and with the arguments swapped.

default_value(option: Option[_TSource], value: _T1) → _TSource | _T1
Get value or default value.

Gets the value of the option if the option is Some, otherwise returns the specified default value.

default_with(getter: Callable[[], _TSource]) → Callable[[Option[_TSource]], _TSource]
Get with default value lazily.

Gets the value of the option if the option is Some, otherwise returns the value produced by the getter

of_obj(value: Any) → Option[Any]
Convert object to an option.

Convert a value that could be None into an Option value.

Parameters
:
value – The input object.

Returns
:
The result option.

of_optional(value: _TSource | None) → Option[_TSource]
Convert an optional value to an option.

Parameters
:
value – The input optional value.

Returns
:
The result option.

or_else(option: Option[_TSource], if_none: Option[_TSource]) → Option[_TSource]
Returns option if it is Some, otherwise returns if_none.

to_optional(value: Option[_TSource]) → _TSource | None
Convert an option value to an optional.

Parameters
:
value – The input option value.

Returns
:
The result optional.


```
# Result
```
Result
Result module.

The Result[TSource,TError] type lets you write error-tolerant code that can be composed. The Result type is typically used in monadic error-handling, which is often referred to as Railway-oriented Programming.

There is also a simplified alias of this type called Try that pins the Result type to Exception.

class Result(**kwargs: Any)
The result class.

static Error(error: _TError) → Result[_TSourceOut, _TError]
Create a new Error result.

static Ok(value: _TResult) → Result[_TResult, _TErrorOut]
Create a new Ok result.

bind(mapper: Callable[[_TSourceOut], Result[_TResult, _TErrorOut]]) → Result[_TResult, _TErrorOut]
Bind result.

Return a result of the value after applying the mapping function, or Error if the input is Error.

default_value(value: _TSource) → _TSourceOut | _TSource
Get with default value.

Gets the value of the result if the result is Ok, otherwise returns the specified default value.

default_with(getter: Callable[[_TErrorOut], _TSource]) → _TSource | _TSourceOut
Get with default value lazily.

Gets the value of the result if the result is Ok, otherwise returns the value produced by the getter

dict() → dict[str, _TSourceOut | _TErrorOut | Literal['ok', 'error']]
Return a json serializable representation of the result.

filter(predicate: Callable[[_TSourceOut], bool], default: _TError) → Result[_TSourceOut, _TError | _TErrorOut]
Filter result.

Returns the input if the predicate evaluates to true, otherwise returns the default

filter_with(predicate: Callable[[_TSourceOut], bool], default: Callable[[_TSourceOut], _TErrorOut]) → Result[_TSourceOut, _TErrorOut]
Filter result.

Returns the input if the predicate evaluates to true, otherwise returns the default using the value as input

is_error() → bool
Returns True if the result is an Error value.

is_ok() → bool
Return True if the result is an Ok value.

map(mapper: Callable[[_TSourceOut], _TResult]) → Result[_TResult, _TErrorOut]
Map result.

Return a result of the value after applying the mapping function, or Error if the input is Error.

map2(other: Result[_TOther, _TErrorOut], mapper: Callable[[_TSourceOut, _TOther], _TResult]) → Result[_TResult, _TErrorOut]
Map result.

Return a result of the value after applying the mapping function, or Error if the input is Error.

map_error(mapper: Callable[[_TErrorOut], _TResult]) → Result[_TSourceOut, _TResult]
Map error.

Return a result of the error value after applying the mapping function, or Ok if the input is Ok.

merge() → _TSource
Merge the ok and error values into a single value.

This method is only available on Results where _TSource and _TError are the same type.

classmethod of_option(value: Option[_TSource], error: _TError) → Result[_TSource, _TError]
Convert option to a result.

classmethod of_option_with(value: Option[_TSource], error: Callable[[], _TError]) → Result[_TSource, _TError]
Convert option to a result.

or_else(other: Result[_TSourceOut, _TErrorOut]) → Result[_TSourceOut, _TErrorOut]
Return the result if it is Ok, otherwise return the other result.

or_else_with(other: Callable[[_TErrorOut], Result[_TSourceOut, _TErrorOut]]) → Result[_TSourceOut, _TErrorOut]
Return the result if it is Ok, otherwise return the result of the other function.

swap() → Result[_TErrorOut, _TSourceOut]
Swaps the value in the result so an Ok becomes an Error and an Error becomes an Ok.

to_option() → Option[_TSourceOut]
Convert result to an option.

default_value(value: _TSource) → Callable[[Result[_TSource, Any]], _TSource]
Get the value or default value.

Gets the value of the result if the result is Ok, otherwise returns the specified default value.

default_with(getter: Callable[[_TError], _TSource]) → Callable[[Result[_TSource, _TError]], _TSource]
Get with default value lazily.

Gets the value of the option if the option is Some, otherwise returns the value produced by the getter

is_error(result: Result[_TSource, _TError]) → TypeGuard[Result[_TSource, _TError]]
Returns True if the result is an Error value.

is_ok(result: Result[_TSource, _TError]) → TypeGuard[Result[_TSource, _TError]]
Returns True if the result is an Ok value.

swap(result: Result[_TSource, _TError]) → Result[_TError, _TSource]
Swaps the value in the result so an Ok becomes an Error and an Error becomes an Ok.
```
# Try

```
Try result class.

The Try type is a simpler Result type that pins the error type to Exception.

Everything else is the same as Result, just simpler to use.

Failure(error: Exception) → Try[Any]
The failure Try case.

Same as result Error but with error type pinned to an exception, i.e: Error[TSource, Exception]

Success(value: _TSource) → Try[_TSource]
The successful Try case.

Same as result Ok but with error type pinned to an exception, i.e: Ok[TSource, Exception]

class Try(**kwargs: Any)
Bases: Result[_TSource, Exception]

A try result.

Same as Result but with error type pinned to Exception. Making it simpler to use when the error type is an exception.

```

# Tagged Unions

```
case() → Any
A case in a tagged union.

tag() → Any
The tag of a tagged union.

tagged_union(*, frozen: bool = False, repr: bool = True, eq: bool = True, order: bool = False) → Callable[[type[_T]], type[_T]]
tagged_union(_cls: type[_T], *, frozen: bool = False, repr: bool = True, eq: bool = True, order: bool = False) → type[_T]
Tagged union decorator.

A decorator that turns a dataclass into a tagged union.

Parameters
:
frozen – Whether the tagged union should be frozen. If True, the __setattr__ and __delattr__ methods will be generated.

repr – If True, the __repr__ method will be generated.

order – If True, the __lt__ method will be generated. The first case will be considered the smallest with index 0 and the items will be compared as the tuple (index, value)

eq – If True, the __eq__ method will be generated.



```
